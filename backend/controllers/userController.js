import User from '../models/userModel.js';
import bcrypt from 'bcryptjs';
import { generateToken } from '../lib/utils.js';
import cloudinary from '../lib/cloudinary.js';
import jwt from 'jsonwebtoken';
import passport from 'passport';

// SSO
export const googleCallback = (req, res, next) => {
  passport.authenticate('google', { session: false }, (err, user, info) => {
    console.log('Google Auth callback:', { err, user, info });
    if (err || !user) {
      return res.status(401).json({ message: 'Google login failed' });
    }
    const token = generateToken(user._id, res);

    // üîÅ Redirect v·ªÅ FE localhost sau khi login
    res.redirect(`http://localhost:5173/oauth-success?token=${token}`);
  })(req, res, next);
};

// GET user by id
export const getUser = async (req, res) => {
  try {
    const user = await User.findById(req.params.id).select('-password');
    if (user) {
      res.status(200).json(user);
    } else {
      res.status(404).json({ message: 'User not found' });
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Internal Server Error' });
  }
};

// GET all users
export const getAllUsers = async (req, res) => {
  try {
    const users = await User.find({}).select(
      'name email profilePic isAdmin phone address createdAt'
    );
    res.status(200).json(users);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Internal Server Error' });
  }
};

// Delete user by id
export const deleteUser = async (req, res) => {
  try {
    const user = await User.findById(req.params.id);
    if (user) {
      if (user.isAdmin) {
        res.status(400).json({ message: 'Cannot delete an admin user' });
        return;
      }
      await user.remove();
      res.status(200).json({ message: 'User deleted' });
    } else {
      res.status(404).json({ message: 'User not found' });
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Internal Server Error' });
  }
};

// Update user
export const updateUser = async (req, res) => {
  try {
    const user = await User.findById(req.user._id);
    const { name, password, profilePic } = req.body;
    if (user) {
      user.name = name || user.name;
      // ƒêang ph√¢n v√¢n c√≥ n√™n thay c·∫£ email hay kh√¥ng
      if (password) {
        user.password = await bcrypt.hash(password, 10);
      }
      if (profilePic) {
        const uploadResponse = await cloudinary.uploader.upload(profilePic, {
          folder: 'users',
          public_id: `user_${req.user._id} ${name}`, // T√™n ·∫£nh
          overwrite: true, // Ghi ƒë√® n·∫øu ƒë√£ t·ªìn t·∫°i
        });
        user.profilePic = uploadResponse.secure_url; // URL ·∫£nh t·ª´ cloudinary
      }
      // Updated
      const updatedUser = await user.save();

      res.status(200).json({
        _id: updatedUser._id,
        name: updatedUser.name,
        profilePic: updatedUser.profilePic,
      });
    } else {
      res.status(404).json({ message: 'User not found' });
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Internal Server Error' });
  }
};

// Login
export const login = async (req, res) => {
  const { email, password } = req.body;

  try {
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(400).json({ message: 'Invalid Credentials' });
    }
    const isPasswordCorrect = await bcrypt.compare(password, user.password);
    if (!isPasswordCorrect) {
      return res.status(400).json({ message: 'Invalid Credentials' });
    }
    const token = generateToken(user._id, res);
    res.status(200).json({
      _id: user._id,
      email: user.email,
      name: user.name,
      profilePic: user.profilePic,
      token,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Internal Server Error' });
  }
};

// Sign-up
export const signup = async (req, res) => {
  const { name, email, password } = req.body;

  try {
    if (!name || !email || !password) {
      return res.status(400).json({ message: 'All fields are required' });
    }
    if (password.length < 6) {
      return res
        .status(400)
        .json({ message: 'Password must be at least 6 characters' });
    }

    const user = await User.findOne({ email });
    if (user) return res.status(400).json({ message: 'Email already exists' });

    const salt = await bcrypt.genSalt(10);
    // hashPass = bcrypt.hash(plainText, salt);
    const hashedPassword = await bcrypt.hash(password, salt);

    const newUser = new User({
      name,
      email,
      password: hashedPassword,
    });

    if (newUser) {
      const token = generateToken(newUser._id, res);
      await newUser.save();

      return res.status(201).json({
        _id: newUser._id,
        name: newUser.name,
        email: newUser.email,
        token,
      });
    } else {
      return res.status(400).json({ message: 'Invalid user data' });
    }
  } catch (error) {
    console.error(error);
    return res.status(500).json({ message: 'Internal Server Error' });
  }
};

// Link reset password
export const forgetPassword = async (req, res) => {
  const { email } = req.body;
  const user = await User.findOne({ email });

  if (!user) {
    return res.status(404).json({ message: 'User not found' });
  }

  const token = generateToken(user._id, res);
  user.resetToken = token;
  await user.save();

  // Check m√¥i tr∆∞·ªùng hi·ªán t·∫°i:
  const isDevP = process.env.NODE_ENV === 'development';
  // Test t·ª´ BE n√™n ƒë·ªÉ c·ªïng 3000
  const FE_BASE_URL = isDevP
    ? 'http://localhost:3000'
    : 'https://yourdomain.com';

  const resetUrl = `${FE_BASE_URL}/api/user/reset-password/${token}`;

  // T·∫°m th·ªùi comment l·∫°i ph·∫ßn g·ª≠i email
  /*
  try {
    await sendResetPasswordEmail(user.email, resetUrl);
    res.status(200).json({ message: 'Reset password link sent to your email' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Error sending reset password email' });
  }
  */

  // T·∫°m th·ªùi tr·∫£ v·ªÅ link reset password
  res.status(200).json({
    message: 'Reset password link generated',
    resetUrl: resetUrl,
  });
};

// Reset password th·ª±c s·ª±
export const resetPassword = async (req, res) => {
  try {
    const { token, password } = req.body;

    if (!token || !password) {
      return res.status(400).json({ message: 'Thi·∫øu token ho·∫∑c m·∫≠t kh·∫©u.' });
    }

    // X√°c th·ª±c token
    let decoded;
    try {
      decoded = jwt.verify(token, process.env.JWT_SECRET);
    } catch (error) {
      return res
        .status(401)
        .json({ message: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.' });
    }

    // T√¨m user theo token reset
    const user = await User.findOne({ resetToken: token });
    if (!user) {
      return res
        .status(404)
        .json({ message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi token n√†y.' });
    }

    // Hash l·∫°i pass
    const hashedPassword = await bcrypt.hash(password, 10);
    user.password = hashedPassword;
    user.resetToken = null; // clear token sau khi d√πng
    await user.save();

    return res.json({ message: 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng.' });
  } catch (error) {
    console.error('L·ªói reset password', error);
    res.status(500).json({ message: 'Internal Server Error' });
  }
};

// Test
// T·∫°o m·ªôt route GET ƒë·ªÉ test reset password UI ƒë∆°n gi·∫£n
export const getResetPassword = async (req, res) => {
  const { token } = req.params;

  const html = `
    <html>
      <head>
        <title>Reset Password</title>
      </head>
      <body>
        <h2>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</h2>
        <form method="POST" action="/api/user/reset-password">
          <input type="hidden" name="token" value="${token}" />
          <label>M·∫≠t kh·∫©u m·ªõi:</label><br/>
          <input type="password" name="password" required /><br/><br/>
          <button type="submit">ƒê·∫∑t l·∫°i</button>
        </form>
      </body>
    </html>
  `;

  res.send(html);
};
