import { GoogleGenAI } from '@google/genai';
import Product from '../models/productModel.js';
import 'dotenv/config';

const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const ai = new GoogleGenAI({ apiKey: GEMINI_API_KEY });

async function askQuestion(question) {
  console.log('\n=== New Chat Question ===');
  console.log('Question:', question);

  try {
    if (!GEMINI_API_KEY) {
      console.error('‚ùå ERROR: GEMINI_API_KEY is not configured');
      throw new Error('AI API key not configured');
    }

    console.log('üì¶ Fetching products from database...');
    const products = await Product.find({});
    console.log(`‚úÖ Found ${products.length} products`);

    const productHTML = products
      .map(
        (product) => `
          <div style="
            border: 1px solid #ddd;
            padding: 16px;
            margin-bottom: 16px;
            margin-top: 16px;
            border-radius: 10px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.06);
            display: flex;
            align-items: center;
            gap: 16px;
            background-color: #ffffff;
            transition: transform 0.2s ease;
          ">
            <div>
              <img
                src="${product.image}"
                alt="${product.name}"
                style="width: 80px; height: 80px; object-fit: cover; border-radius: 8px; border: 1px solid #ccc;"
              />
            </div>
            <div>
              <h3 style="font-size: 16px; margin: 0 0 6px 0; color: #222;">${product.name}</h3>
              <p style="margin: 0 0 8px 0; font-size: 14px; color: #555;">
                <strong>Gi√°:</strong> ${product.price.toLocaleString()} VNƒê
              </p>
              <a
                href="http://localhost:5173/user/product/${product._id}"
                target="_blank"
                style="font-size: 14px; text-decoration: underline; color: #007bff;"
              >Xem s·∫£n ph·∫©m</a>
            </div>
          </div>
        `
      )
      .join('');

    const lowerCaseQuestion = question.trim().toLowerCase();
    const greetings = [
      'hello',
      'hi',
      'xin ch√†o',
      'ch√†o',
      'ch√†o b·∫°n',
    ];

    if (greetings.some((greet) => lowerCaseQuestion.includes(greet))) {
      return `
    <p>Xin ch√†o! üëã</p>
    <p>T√¥i l√† tr·ª£ l√Ω c·ªßa <strong>EcommerPWA</strong>!</p>
    <p>T√¥i c√≥ th·ªÉ h·ªó tr·ª£ g√¨ cho b·∫°n h√¥m nay?</p>
  `;
    }

    const prompt = `
      B·∫°n l√† m·ªôt tr·ª£ l√Ω b√°n h√†ng chuy√™n nghi·ªáp, th√¢n thi·ªán v√† n√≥i ti·∫øng Vi·ªát.
      B·∫°n c√≥ th·ªÉ tr·∫£ l·ªùi nh·ªØng c√¢u h·ªèi chung nh∆∞ "Xin ch√†o", "B·∫°n l√† ai", ho·∫∑c cung c·∫•p th√¥ng tin v·ªÅ c√°c s·∫£n ph·∫©m d∆∞·ªõi ƒë√¢y n·∫øu li√™n quan.
      
      D∆∞·ªõi ƒë√¢y l√† danh s√°ch s·∫£n ph·∫©m (hi·ªÉn th·ªã d·∫°ng HTML):
      
      ${productHTML}
      
      C√¢u h·ªèi c·ªßa kh√°ch h√†ng: "${question}"

      Ph·∫£n h·ªìi ng·∫Øn g·ªçn, th√¢n thi·ªán, c√≥ th·ªÉ s·ª≠ d·ª•ng HTML n·∫øu c·∫ßn ƒë·ªÉ tr√¨nh b√†y s·∫£n ph·∫©m ƒë·∫πp v√† d·ªÖ hi·ªÉu.
      N·∫øu kh√°ch h·ªèi ch√†o, gi·ªõi thi·ªáu b·∫£n th√¢n ho·∫∑c h·ªèi ch·ª©c nƒÉng th√¨ tr·∫£ l·ªùi t∆∞∆°ng ·ª©ng.
      `;

    console.log('ü§ñ Sending request to Gemini AI...');
    const result = await ai.models.generateContent({
      model: 'gemini-2.0-flash-001',
      contents: [
        {
          role: 'user',
          parts: [{ text: prompt }],
        },
      ],
    });

    if (!result || !result.candidates || !result.candidates.length) {
      console.error('‚ùå ERROR: Invalid response from Gemini AI:', result);
      throw new Error('Invalid AI response');
    }

    console.log('‚úÖ Got response from AI');
    const answer =
      result?.candidates?.[0]?.content?.parts?.[0]?.text ||
      'Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ AI.';
    return answer.replace(/(\n|\r)/g, ' ').trim();
  } catch (error) {
    console.error('\n‚ùå ERROR in askQuestion:', {
      name: error.name,
      message: error.message,
      stack: error.stack,
    });
    return `<p style="color: red;">Xin l·ªói, hi·ªán t·∫°i t√¥i kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau!</p>`;
  }
}

// Export the function for use in routes
export { askQuestion };
